// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2awYjQxaFuULphBNfdnqZC
// Component: 8LItiVaJPPqK
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 2awYjQxaFuULphBNfdnqZC/projectcss
import sty from "./PlasmicOption.module.css"; // plasmic-import: 8LItiVaJPPqK/css
import SunIcon from "./icons/PlasmicIcon__Sun"; // plasmic-import: YkyfZiWmVqoo/icon

createPlasmicElementProxy;

export const PlasmicOption__VariantProps = new Array();

export const PlasmicOption__ArgProps = new Array();

const $$ = {};

function PlasmicOption__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"frame18"}
      data-plasmic-override={overrides.frame18}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.frame18
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"vuesaxBoldSun"}
        data-plasmic-override={overrides.vuesaxBoldSun}
        hasGap={true}
        className={classNames(projectcss.all, sty.vuesaxBoldSun)}
      >
        <div
          data-plasmic-name={"vuesaxBoldSun2"}
          data-plasmic-override={overrides.vuesaxBoldSun2}
          className={classNames(projectcss.all, sty.vuesaxBoldSun2)}
        >
          <SunIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </Stack__>
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Covid 19"}
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  frame18: ["frame18", "vuesaxBoldSun", "vuesaxBoldSun2", "svg", "text"],
  vuesaxBoldSun: ["vuesaxBoldSun", "vuesaxBoldSun2", "svg"],
  vuesaxBoldSun2: ["vuesaxBoldSun2", "svg"],
  svg: ["svg"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOption__ArgProps,
          internalVariantPropNames: PlasmicOption__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOption__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame18") {
    func.displayName = "PlasmicOption";
  } else {
    func.displayName = `PlasmicOption.${nodeName}`;
  }
  return func;
}

export const PlasmicOption = Object.assign(
  // Top-level PlasmicOption renders the root element
  makeNodeComponent("frame18"),
  {
    // Helper components rendering sub-elements
    vuesaxBoldSun: makeNodeComponent("vuesaxBoldSun"),
    vuesaxBoldSun2: makeNodeComponent("vuesaxBoldSun2"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicOption
    internalVariantProps: PlasmicOption__VariantProps,
    internalArgProps: PlasmicOption__ArgProps
  }
);

export default PlasmicOption;
/* prettier-ignore-end */
