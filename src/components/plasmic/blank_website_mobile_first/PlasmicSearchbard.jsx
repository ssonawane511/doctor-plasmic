// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2awYjQxaFuULphBNfdnqZC
// Component: JRftrR28OaNu
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 2awYjQxaFuULphBNfdnqZC/projectcss
import sty from "./PlasmicSearchbard.module.css"; // plasmic-import: JRftrR28OaNu/css
import SearchNormalIcon from "./icons/PlasmicIcon__SearchNormal"; // plasmic-import: T9qCoXYybk8K/icon

createPlasmicElementProxy;

export const PlasmicSearchbard__VariantProps = new Array();

export const PlasmicSearchbard__ArgProps = new Array();

const $$ = {};

function PlasmicSearchbard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"frame9"}
      data-plasmic-override={overrides.frame9}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.frame9
      )}
    >
      <div
        data-plasmic-name={"vuesaxLinearSearchNormal"}
        data-plasmic-override={overrides.vuesaxLinearSearchNormal}
        className={classNames(projectcss.all, sty.vuesaxLinearSearchNormal)}
      >
        <div
          data-plasmic-name={"vuesaxLinearSearchNormal2"}
          data-plasmic-override={overrides.vuesaxLinearSearchNormal2}
          className={classNames(projectcss.all, sty.vuesaxLinearSearchNormal2)}
        >
          <SearchNormalIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Search doctor or health issue"}
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  frame9: [
    "frame9",
    "vuesaxLinearSearchNormal",
    "vuesaxLinearSearchNormal2",
    "svg",
    "text"
  ],

  vuesaxLinearSearchNormal: [
    "vuesaxLinearSearchNormal",
    "vuesaxLinearSearchNormal2",
    "svg"
  ],

  vuesaxLinearSearchNormal2: ["vuesaxLinearSearchNormal2", "svg"],
  svg: ["svg"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchbard__ArgProps,
          internalVariantPropNames: PlasmicSearchbard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchbard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame9") {
    func.displayName = "PlasmicSearchbard";
  } else {
    func.displayName = `PlasmicSearchbard.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchbard = Object.assign(
  // Top-level PlasmicSearchbard renders the root element
  makeNodeComponent("frame9"),
  {
    // Helper components rendering sub-elements
    vuesaxLinearSearchNormal: makeNodeComponent("vuesaxLinearSearchNormal"),
    vuesaxLinearSearchNormal2: makeNodeComponent("vuesaxLinearSearchNormal2"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicSearchbard
    internalVariantProps: PlasmicSearchbard__VariantProps,
    internalArgProps: PlasmicSearchbard__ArgProps
  }
);

export default PlasmicSearchbard;
/* prettier-ignore-end */
