// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2awYjQxaFuULphBNfdnqZC
// Component: CeaT0ab-nEDE
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Doctorcard from "../../Doctorcard"; // plasmic-import: rhRLKA6pErpe/component
import Searchbard from "../../Searchbard"; // plasmic-import: JRftrR28OaNu/component
import Option from "../../Option"; // plasmic-import: 8LItiVaJPPqK/component
import Footer from "../../Footer"; // plasmic-import: GF_ZKYfbWnr-/component
import DoctorInfoCard from "../../DoctorInfoCard"; // plasmic-import: fGoVKsk_ZHQf/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 2awYjQxaFuULphBNfdnqZC/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: CeaT0ab-nEDE/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Doctorcard
            data-plasmic-name={"doctorcard"}
            data-plasmic-override={overrides.doctorcard}
            className={classNames("__wab_instance", sty.doctorcard)}
          />

          <Searchbard
            data-plasmic-name={"search"}
            data-plasmic-override={overrides.search}
            className={classNames("__wab_instance", sty.search)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Option
              className={classNames("__wab_instance", sty.option__yncS3)}
            />

            <Option
              className={classNames("__wab_instance", sty.option__xdMlV)}
            />

            <Option
              className={classNames("__wab_instance", sty.option__pQ97E)}
            />

            <Option
              className={classNames("__wab_instance", sty.option__v3L9D)}
            />
          </div>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Near Doctor"}
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <div
            data-plasmic-name={"doctorsInfoList"}
            data-plasmic-override={overrides.doctorsInfoList}
            className={classNames(projectcss.all, sty.doctorsInfoList)}
          >
            <DoctorInfoCard
              data-plasmic-name={"doctorInfoCard"}
              data-plasmic-override={overrides.doctorInfoCard}
              className={classNames("__wab_instance", sty.doctorInfoCard)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "doctorcard",
    "search",
    "freeBox",
    "text",
    "footer",
    "doctorsInfoList",
    "doctorInfoCard"
  ],

  doctorcard: ["doctorcard"],
  search: ["search"],
  freeBox: ["freeBox"],
  text: ["text"],
  footer: ["footer"],
  doctorsInfoList: ["doctorsInfoList", "doctorInfoCard"],
  doctorInfoCard: ["doctorInfoCard"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    doctorcard: makeNodeComponent("doctorcard"),
    search: makeNodeComponent("search"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    footer: makeNodeComponent("footer"),
    doctorsInfoList: makeNodeComponent("doctorsInfoList"),
    doctorInfoCard: makeNodeComponent("doctorInfoCard"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
