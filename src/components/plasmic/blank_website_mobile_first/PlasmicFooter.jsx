// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2awYjQxaFuULphBNfdnqZC
// Component: GF_ZKYfbWnr-
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 2awYjQxaFuULphBNfdnqZC/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: GF_ZKYfbWnr-/css
import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: kDpKzZQFyru8/icon
import Calendar22Icon from "./icons/PlasmicIcon__Calendar22"; // plasmic-import: vFSQagfq1MSF/icon
import MessageIcon from "./icons/PlasmicIcon__Message"; // plasmic-import: OpVPcPNP5aO7/icon
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: a1-Ji9wEVmkF/icon

createPlasmicElementProxy;

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

const $$ = {};

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"frame6"}
      data-plasmic-override={overrides.frame6}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.frame6
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame1"}
        data-plasmic-override={overrides.frame1}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame1)}
      >
        <div
          data-plasmic-name={"home2"}
          data-plasmic-override={overrides.home2}
          className={classNames(projectcss.all, sty.home2)}
        >
          <div
            data-plasmic-name={"home3"}
            data-plasmic-override={overrides.home3}
            className={classNames(projectcss.all, sty.home3)}
          >
            <HomeIcon
              className={classNames(projectcss.all, sty.svg__wMgh7)}
              role={"img"}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Home"}
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"frame4"}
        data-plasmic-override={overrides.frame4}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame4)}
      >
        <div
          data-plasmic-name={"vuesaxLinearCalendar23"}
          data-plasmic-override={overrides.vuesaxLinearCalendar23}
          className={classNames(projectcss.all, sty.vuesaxLinearCalendar23)}
        >
          <div
            data-plasmic-name={"vuesaxLinearCalendar24"}
            data-plasmic-override={overrides.vuesaxLinearCalendar24}
            className={classNames(projectcss.all, sty.vuesaxLinearCalendar24)}
          >
            <Calendar22Icon
              className={classNames(projectcss.all, sty.svg__wgRaw)}
              role={"img"}
            />
          </div>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"frame5"}
        data-plasmic-override={overrides.frame5}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame5)}
      >
        <div
          data-plasmic-name={"vuesaxLinearMessage"}
          data-plasmic-override={overrides.vuesaxLinearMessage}
          className={classNames(projectcss.all, sty.vuesaxLinearMessage)}
        >
          <div
            data-plasmic-name={"vuesaxLinearMessage2"}
            data-plasmic-override={overrides.vuesaxLinearMessage2}
            className={classNames(projectcss.all, sty.vuesaxLinearMessage2)}
          >
            <MessageIcon
              className={classNames(projectcss.all, sty.svg__glG3L)}
              role={"img"}
            />
          </div>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"frame3"}
        data-plasmic-override={overrides.frame3}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame3)}
      >
        <div
          data-plasmic-name={"vuesaxLinearProfile"}
          data-plasmic-override={overrides.vuesaxLinearProfile}
          className={classNames(projectcss.all, sty.vuesaxLinearProfile)}
        >
          <div
            data-plasmic-name={"vuesaxLinearProfile2"}
            data-plasmic-override={overrides.vuesaxLinearProfile2}
            className={classNames(projectcss.all, sty.vuesaxLinearProfile2)}
          >
            <ProfileIcon
              className={classNames(projectcss.all, sty.svg__n4TW)}
              role={"img"}
            />
          </div>
        </div>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  frame6: [
    "frame6",
    "frame1",
    "home2",
    "home3",
    "text",
    "frame4",
    "vuesaxLinearCalendar23",
    "vuesaxLinearCalendar24",
    "frame5",
    "vuesaxLinearMessage",
    "vuesaxLinearMessage2",
    "frame3",
    "vuesaxLinearProfile",
    "vuesaxLinearProfile2"
  ],

  frame1: ["frame1", "home2", "home3", "text"],
  home2: ["home2", "home3"],
  home3: ["home3"],
  text: ["text"],
  frame4: ["frame4", "vuesaxLinearCalendar23", "vuesaxLinearCalendar24"],
  vuesaxLinearCalendar23: ["vuesaxLinearCalendar23", "vuesaxLinearCalendar24"],
  vuesaxLinearCalendar24: ["vuesaxLinearCalendar24"],
  frame5: ["frame5", "vuesaxLinearMessage", "vuesaxLinearMessage2"],
  vuesaxLinearMessage: ["vuesaxLinearMessage", "vuesaxLinearMessage2"],
  vuesaxLinearMessage2: ["vuesaxLinearMessage2"],
  frame3: ["frame3", "vuesaxLinearProfile", "vuesaxLinearProfile2"],
  vuesaxLinearProfile: ["vuesaxLinearProfile", "vuesaxLinearProfile2"],
  vuesaxLinearProfile2: ["vuesaxLinearProfile2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame6") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("frame6"),
  {
    // Helper components rendering sub-elements
    frame1: makeNodeComponent("frame1"),
    home2: makeNodeComponent("home2"),
    home3: makeNodeComponent("home3"),
    text: makeNodeComponent("text"),
    frame4: makeNodeComponent("frame4"),
    vuesaxLinearCalendar23: makeNodeComponent("vuesaxLinearCalendar23"),
    vuesaxLinearCalendar24: makeNodeComponent("vuesaxLinearCalendar24"),
    frame5: makeNodeComponent("frame5"),
    vuesaxLinearMessage: makeNodeComponent("vuesaxLinearMessage"),
    vuesaxLinearMessage2: makeNodeComponent("vuesaxLinearMessage2"),
    frame3: makeNodeComponent("frame3"),
    vuesaxLinearProfile: makeNodeComponent("vuesaxLinearProfile"),
    vuesaxLinearProfile2: makeNodeComponent("vuesaxLinearProfile2"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
