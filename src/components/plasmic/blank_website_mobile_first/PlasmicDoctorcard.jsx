// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2awYjQxaFuULphBNfdnqZC
// Component: rhRLKA6pErpe
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 2awYjQxaFuULphBNfdnqZC/projectcss
import sty from "./PlasmicDoctorcard.module.css"; // plasmic-import: rhRLKA6pErpe/css
import Image7Icon from "./icons/PlasmicIcon__Image7"; // plasmic-import: 1Kxn2OSTU49a/icon
import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: kjXxvQC9_jlu/icon
import Vector1Icon from "./icons/PlasmicIcon__Vector1"; // plasmic-import: 9EDqbG1ZxSAX/icon
import Calendar2Icon from "./icons/PlasmicIcon__Calendar2"; // plasmic-import: U2ix7DjIvRun/icon
import ClockIcon from "./icons/PlasmicIcon__Clock"; // plasmic-import: fLZaPCGWwjw-/icon

createPlasmicElementProxy;

export const PlasmicDoctorcard__VariantProps = new Array();

export const PlasmicDoctorcard__ArgProps = new Array("docName", "doctorRole");

const $$ = {};

function PlasmicDoctorcard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          docName: "DocName",
          doctorRole: "Role"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"frame11"}
      data-plasmic-override={overrides.frame11}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.frame11
      )}
      onClick={async event => {
        const $steps = {};
        $steps["runCode"] = true
          ? (() => {
              const actionArgs = {
                customFunction: async () => {
                  return console.log($props.docName);
                }
              };
              return (({ customFunction }) => {
                return customFunction();
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runCode"] != null &&
          typeof $steps["runCode"] === "object" &&
          typeof $steps["runCode"].then === "function"
        ) {
          $steps["runCode"] = await $steps["runCode"];
        }
      }}
    >
      <div
        data-plasmic-name={"frame16"}
        data-plasmic-override={overrides.frame16}
        className={classNames(projectcss.all, sty.frame16)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame12"}
          data-plasmic-override={overrides.frame12}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame12)}
        >
          <div
            data-plasmic-name={"group1"}
            data-plasmic-override={overrides.group1}
            className={classNames(projectcss.all, sty.group1)}
          >
            <Image7Icon
              className={classNames(projectcss.all, sty.svg___8BoZo)}
              role={"img"}
            />

            <div
              data-plasmic-name={"maskGroup"}
              data-plasmic-override={overrides.maskGroup}
              className={classNames(projectcss.all, sty.maskGroup)}
            >
              <div
                data-plasmic-name={"image8"}
                data-plasmic-override={overrides.image8}
                className={classNames(projectcss.all, sty.image8)}
              />
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame10"}
            data-plasmic-override={overrides.frame10}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame10)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eyMwh
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.docName;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Dr. Imran Syahir";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bqvA5
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.doctorRole;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "General Doctor";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"vuesaxLinearArrowRight"}
          data-plasmic-override={overrides.vuesaxLinearArrowRight}
          className={classNames(projectcss.all, sty.vuesaxLinearArrowRight)}
        >
          <div
            data-plasmic-name={"vuesaxLinearArrowRight2"}
            data-plasmic-override={overrides.vuesaxLinearArrowRight2}
            className={classNames(projectcss.all, sty.vuesaxLinearArrowRight2)}
          >
            <ArrowRightIcon
              className={classNames(projectcss.all, sty.svg__mPtA2)}
              role={"img"}
            />
          </div>
        </div>
      </div>
      <Vector1Icon
        className={classNames(projectcss.all, sty.svg__wg2Uu)}
        role={"img"}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"frame15"}
        data-plasmic-override={overrides.frame15}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame15)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame14"}
          data-plasmic-override={overrides.frame14}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame14)}
        >
          <div
            data-plasmic-name={"vuesaxLinearCalendar2"}
            data-plasmic-override={overrides.vuesaxLinearCalendar2}
            className={classNames(projectcss.all, sty.vuesaxLinearCalendar2)}
          >
            <div
              data-plasmic-name={"vuesaxLinearCalendar22"}
              data-plasmic-override={overrides.vuesaxLinearCalendar22}
              className={classNames(projectcss.all, sty.vuesaxLinearCalendar22)}
            >
              <Calendar2Icon
                className={classNames(projectcss.all, sty.svg__yhK5A)}
                role={"img"}
              />
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nyTiR
            )}
          >
            {"Sunday, 12 June"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame13"}
          data-plasmic-override={overrides.frame13}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame13)}
        >
          <div
            data-plasmic-name={"vuesaxLinearClock"}
            data-plasmic-override={overrides.vuesaxLinearClock}
            className={classNames(projectcss.all, sty.vuesaxLinearClock)}
          >
            <div
              data-plasmic-name={"vuesaxLinearClock2"}
              data-plasmic-override={overrides.vuesaxLinearClock2}
              className={classNames(projectcss.all, sty.vuesaxLinearClock2)}
            >
              <ClockIcon
                className={classNames(projectcss.all, sty.svg__w8GEb)}
                role={"img"}
              />
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lJKvR
            )}
          >
            {"11:00 - 12:00 AM"}
          </div>
        </Stack__>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  frame11: [
    "frame11",
    "frame16",
    "frame12",
    "group1",
    "maskGroup",
    "image8",
    "frame10",
    "vuesaxLinearArrowRight",
    "vuesaxLinearArrowRight2",
    "frame15",
    "frame14",
    "vuesaxLinearCalendar2",
    "vuesaxLinearCalendar22",
    "frame13",
    "vuesaxLinearClock",
    "vuesaxLinearClock2"
  ],

  frame16: [
    "frame16",
    "frame12",
    "group1",
    "maskGroup",
    "image8",
    "frame10",
    "vuesaxLinearArrowRight",
    "vuesaxLinearArrowRight2"
  ],

  frame12: ["frame12", "group1", "maskGroup", "image8", "frame10"],
  group1: ["group1", "maskGroup", "image8"],
  maskGroup: ["maskGroup", "image8"],
  image8: ["image8"],
  frame10: ["frame10"],
  vuesaxLinearArrowRight: ["vuesaxLinearArrowRight", "vuesaxLinearArrowRight2"],
  vuesaxLinearArrowRight2: ["vuesaxLinearArrowRight2"],
  frame15: [
    "frame15",
    "frame14",
    "vuesaxLinearCalendar2",
    "vuesaxLinearCalendar22",
    "frame13",
    "vuesaxLinearClock",
    "vuesaxLinearClock2"
  ],

  frame14: ["frame14", "vuesaxLinearCalendar2", "vuesaxLinearCalendar22"],
  vuesaxLinearCalendar2: ["vuesaxLinearCalendar2", "vuesaxLinearCalendar22"],
  vuesaxLinearCalendar22: ["vuesaxLinearCalendar22"],
  frame13: ["frame13", "vuesaxLinearClock", "vuesaxLinearClock2"],
  vuesaxLinearClock: ["vuesaxLinearClock", "vuesaxLinearClock2"],
  vuesaxLinearClock2: ["vuesaxLinearClock2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDoctorcard__ArgProps,
          internalVariantPropNames: PlasmicDoctorcard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDoctorcard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame11") {
    func.displayName = "PlasmicDoctorcard";
  } else {
    func.displayName = `PlasmicDoctorcard.${nodeName}`;
  }
  return func;
}

export const PlasmicDoctorcard = Object.assign(
  // Top-level PlasmicDoctorcard renders the root element
  makeNodeComponent("frame11"),
  {
    // Helper components rendering sub-elements
    frame16: makeNodeComponent("frame16"),
    frame12: makeNodeComponent("frame12"),
    group1: makeNodeComponent("group1"),
    maskGroup: makeNodeComponent("maskGroup"),
    image8: makeNodeComponent("image8"),
    frame10: makeNodeComponent("frame10"),
    vuesaxLinearArrowRight: makeNodeComponent("vuesaxLinearArrowRight"),
    vuesaxLinearArrowRight2: makeNodeComponent("vuesaxLinearArrowRight2"),
    frame15: makeNodeComponent("frame15"),
    frame14: makeNodeComponent("frame14"),
    vuesaxLinearCalendar2: makeNodeComponent("vuesaxLinearCalendar2"),
    vuesaxLinearCalendar22: makeNodeComponent("vuesaxLinearCalendar22"),
    frame13: makeNodeComponent("frame13"),
    vuesaxLinearClock: makeNodeComponent("vuesaxLinearClock"),
    vuesaxLinearClock2: makeNodeComponent("vuesaxLinearClock2"),
    // Metadata about props expected for PlasmicDoctorcard
    internalVariantProps: PlasmicDoctorcard__VariantProps,
    internalArgProps: PlasmicDoctorcard__ArgProps
  }
);

export default PlasmicDoctorcard;
/* prettier-ignore-end */
