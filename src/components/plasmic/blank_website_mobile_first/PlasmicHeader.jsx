// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2awYjQxaFuULphBNfdnqZC
// Component: -S7e2iU6NsDm
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 2awYjQxaFuULphBNfdnqZC/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: -S7e2iU6NsDm/css
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: wMQiFPICzeJi/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: 4572UgBPokvw/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: UY4UT-4KJyPW/icon

createPlasmicElementProxy;

export const PlasmicHeader__VariantProps = new Array();

export const PlasmicHeader__ArgProps = new Array();

const $$ = {};

function PlasmicHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"frame8"}
      data-plasmic-override={overrides.frame8}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.frame8
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame7"}
        data-plasmic-override={overrides.frame7}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame7)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__daeFe
          )}
        >
          {"Hello,"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__j01GS
          )}
        >
          {"Hi James"}
        </div>
      </Stack__>
      <div
        data-plasmic-name={"frame"}
        data-plasmic-override={overrides.frame}
        className={classNames(projectcss.all, sty.frame)}
      >
        <div
          data-plasmic-name={"group"}
          data-plasmic-override={overrides.group}
          className={classNames(projectcss.all, sty.group)}
        >
          <VectorIcon
            className={classNames(projectcss.all, sty.svg___4Oy4Z)}
            role={"img"}
          />

          <Vector3Icon
            className={classNames(projectcss.all, sty.svg__xRtdg)}
            role={"img"}
          />

          <GroupIcon
            className={classNames(projectcss.all, sty.svg___1M6Eq)}
            role={"img"}
          />
        </div>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  frame8: ["frame8", "frame7", "frame", "group"],
  frame7: ["frame7"],
  frame: ["frame", "group"],
  group: ["group"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame8") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("frame8"),
  {
    // Helper components rendering sub-elements
    frame7: makeNodeComponent("frame7"),
    frame: makeNodeComponent("frame"),
    group: makeNodeComponent("group"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
